// Code generated by stanc v2.32.2
#include <stan/model/model_header.hpp>
namespace gamma_fit_model_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 31> locations_array__ =
  {" (found before start of program)",
  " (in 'C:/Users/gcyburt/Documents/repos/priv/AGH-Data-Analytics/Data-Analytics/Project/gamma_fit.stan', line 15, column 2 to column 22)",
  " (in 'C:/Users/gcyburt/Documents/repos/priv/AGH-Data-Analytics/Data-Analytics/Project/gamma_fit.stan', line 16, column 2 to column 21)",
  " (in 'C:/Users/gcyburt/Documents/repos/priv/AGH-Data-Analytics/Data-Analytics/Project/gamma_fit.stan', line 17, column 2 to column 22)",
  " (in 'C:/Users/gcyburt/Documents/repos/priv/AGH-Data-Analytics/Data-Analytics/Project/gamma_fit.stan', line 33, column 2 to column 33)",
  " (in 'C:/Users/gcyburt/Documents/repos/priv/AGH-Data-Analytics/Data-Analytics/Project/gamma_fit.stan', line 34, column 2 to column 20)",
  " (in 'C:/Users/gcyburt/Documents/repos/priv/AGH-Data-Analytics/Data-Analytics/Project/gamma_fit.stan', line 38, column 4 to column 91)",
  " (in 'C:/Users/gcyburt/Documents/repos/priv/AGH-Data-Analytics/Data-Analytics/Project/gamma_fit.stan', line 39, column 4 to column 105)",
  " (in 'C:/Users/gcyburt/Documents/repos/priv/AGH-Data-Analytics/Data-Analytics/Project/gamma_fit.stan', line 37, column 17 to line 40, column 3)",
  " (in 'C:/Users/gcyburt/Documents/repos/priv/AGH-Data-Analytics/Data-Analytics/Project/gamma_fit.stan', line 37, column 2 to line 40, column 3)",
  " (in 'C:/Users/gcyburt/Documents/repos/priv/AGH-Data-Analytics/Data-Analytics/Project/gamma_fit.stan', line 22, column 2 to column 42)",
  " (in 'C:/Users/gcyburt/Documents/repos/priv/AGH-Data-Analytics/Data-Analytics/Project/gamma_fit.stan', line 23, column 2 to column 39)",
  " (in 'C:/Users/gcyburt/Documents/repos/priv/AGH-Data-Analytics/Data-Analytics/Project/gamma_fit.stan', line 24, column 2 to column 42)",
  " (in 'C:/Users/gcyburt/Documents/repos/priv/AGH-Data-Analytics/Data-Analytics/Project/gamma_fit.stan', line 28, column 4 to column 87)",
  " (in 'C:/Users/gcyburt/Documents/repos/priv/AGH-Data-Analytics/Data-Analytics/Project/gamma_fit.stan', line 27, column 17 to line 29, column 3)",
  " (in 'C:/Users/gcyburt/Documents/repos/priv/AGH-Data-Analytics/Data-Analytics/Project/gamma_fit.stan', line 27, column 2 to line 29, column 3)",
  " (in 'C:/Users/gcyburt/Documents/repos/priv/AGH-Data-Analytics/Data-Analytics/Project/gamma_fit.stan', line 2, column 2 to column 17)",
  " (in 'C:/Users/gcyburt/Documents/repos/priv/AGH-Data-Analytics/Data-Analytics/Project/gamma_fit.stan', line 3, column 27 to column 28)",
  " (in 'C:/Users/gcyburt/Documents/repos/priv/AGH-Data-Analytics/Data-Analytics/Project/gamma_fit.stan', line 3, column 2 to column 51)",
  " (in 'C:/Users/gcyburt/Documents/repos/priv/AGH-Data-Analytics/Data-Analytics/Project/gamma_fit.stan', line 4, column 18 to column 19)",
  " (in 'C:/Users/gcyburt/Documents/repos/priv/AGH-Data-Analytics/Data-Analytics/Project/gamma_fit.stan', line 4, column 2 to column 29)",
  " (in 'C:/Users/gcyburt/Documents/repos/priv/AGH-Data-Analytics/Data-Analytics/Project/gamma_fit.stan', line 5, column 18 to column 19)",
  " (in 'C:/Users/gcyburt/Documents/repos/priv/AGH-Data-Analytics/Data-Analytics/Project/gamma_fit.stan', line 5, column 2 to column 33)",
  " (in 'C:/Users/gcyburt/Documents/repos/priv/AGH-Data-Analytics/Data-Analytics/Project/gamma_fit.stan', line 6, column 2 to column 28)",
  " (in 'C:/Users/gcyburt/Documents/repos/priv/AGH-Data-Analytics/Data-Analytics/Project/gamma_fit.stan', line 7, column 2 to column 28)",
  " (in 'C:/Users/gcyburt/Documents/repos/priv/AGH-Data-Analytics/Data-Analytics/Project/gamma_fit.stan', line 8, column 2 to column 27)",
  " (in 'C:/Users/gcyburt/Documents/repos/priv/AGH-Data-Analytics/Data-Analytics/Project/gamma_fit.stan', line 9, column 2 to column 27)",
  " (in 'C:/Users/gcyburt/Documents/repos/priv/AGH-Data-Analytics/Data-Analytics/Project/gamma_fit.stan', line 10, column 2 to column 28)",
  " (in 'C:/Users/gcyburt/Documents/repos/priv/AGH-Data-Analytics/Data-Analytics/Project/gamma_fit.stan', line 11, column 2 to column 28)",
  " (in 'C:/Users/gcyburt/Documents/repos/priv/AGH-Data-Analytics/Data-Analytics/Project/gamma_fit.stan', line 33, column 9 to column 10)",
  " (in 'C:/Users/gcyburt/Documents/repos/priv/AGH-Data-Analytics/Data-Analytics/Project/gamma_fit.stan', line 34, column 9 to column 10)"};
class gamma_fit_model final : public model_base_crtp<gamma_fit_model> {
 private:
  int N;
  Eigen::Matrix<double,-1,1> unplanned_stop_times_data__;
  Eigen::Matrix<double,-1,1> rejects_data__;
  Eigen::Matrix<double,-1,1> cycle_times_data__;
  double alpha_shape;
  double alpha_scale;
  double beta_shape;
  double beta_scale;
  double gamma_shape;
  double gamma_scale;
  Eigen::Map<Eigen::Matrix<double,-1,1>> unplanned_stop_times{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> rejects{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> cycle_times{nullptr, 0};
 public:
  ~gamma_fit_model() {}
  gamma_fit_model(stan::io::var_context& context__, unsigned int
                  random_seed__ = 0, std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "gamma_fit_model_namespace::gamma_fit_model";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 16;
      context__.validate_dims("data initialization", "N", "int",
        std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      current_statement__ = 16;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 16;
      stan::math::check_greater_or_equal(function__, "N", N, 0);
      current_statement__ = 17;
      stan::math::validate_non_negative_index("unplanned_stop_times", "N", N);
      current_statement__ = 18;
      context__.validate_dims("data initialization", "unplanned_stop_times",
        "double", std::vector<size_t>{static_cast<size_t>(N)});
      unplanned_stop_times_data__ = Eigen::Matrix<double,-1,1>::Constant(N,
                                      std::numeric_limits<double>::quiet_NaN());
      new (&unplanned_stop_times)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(unplanned_stop_times_data__.data(),
        N);
      {
        std::vector<local_scalar_t__> unplanned_stop_times_flat__;
        current_statement__ = 18;
        unplanned_stop_times_flat__ = context__.vals_r("unplanned_stop_times");
        current_statement__ = 18;
        pos__ = 1;
        current_statement__ = 18;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 18;
          stan::model::assign(unplanned_stop_times,
            unplanned_stop_times_flat__[(pos__ - 1)],
            "assigning variable unplanned_stop_times",
            stan::model::index_uni(sym1__));
          current_statement__ = 18;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 18;
      stan::math::check_greater_or_equal(function__, "unplanned_stop_times",
        unplanned_stop_times, 0);
      current_statement__ = 18;
      stan::math::check_less_or_equal(function__, "unplanned_stop_times",
        unplanned_stop_times, 1);
      current_statement__ = 19;
      stan::math::validate_non_negative_index("rejects", "N", N);
      current_statement__ = 20;
      context__.validate_dims("data initialization", "rejects", "double",
        std::vector<size_t>{static_cast<size_t>(N)});
      rejects_data__ = Eigen::Matrix<double,-1,1>::Constant(N,
                         std::numeric_limits<double>::quiet_NaN());
      new (&rejects)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(rejects_data__.data(), N);
      {
        std::vector<local_scalar_t__> rejects_flat__;
        current_statement__ = 20;
        rejects_flat__ = context__.vals_r("rejects");
        current_statement__ = 20;
        pos__ = 1;
        current_statement__ = 20;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 20;
          stan::model::assign(rejects, rejects_flat__[(pos__ - 1)],
            "assigning variable rejects", stan::model::index_uni(sym1__));
          current_statement__ = 20;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 20;
      stan::math::check_greater_or_equal(function__, "rejects", rejects, 0);
      current_statement__ = 21;
      stan::math::validate_non_negative_index("cycle_times", "N", N);
      current_statement__ = 22;
      context__.validate_dims("data initialization", "cycle_times", "double",
        std::vector<size_t>{static_cast<size_t>(N)});
      cycle_times_data__ = Eigen::Matrix<double,-1,1>::Constant(N,
                             std::numeric_limits<double>::quiet_NaN());
      new (&cycle_times)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(cycle_times_data__.data(), N);
      {
        std::vector<local_scalar_t__> cycle_times_flat__;
        current_statement__ = 22;
        cycle_times_flat__ = context__.vals_r("cycle_times");
        current_statement__ = 22;
        pos__ = 1;
        current_statement__ = 22;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 22;
          stan::model::assign(cycle_times, cycle_times_flat__[(pos__ - 1)],
            "assigning variable cycle_times", stan::model::index_uni(sym1__));
          current_statement__ = 22;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 22;
      stan::math::check_greater_or_equal(function__, "cycle_times",
        cycle_times, 0);
      current_statement__ = 23;
      context__.validate_dims("data initialization", "alpha_shape", "double",
        std::vector<size_t>{});
      alpha_shape = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 23;
      alpha_shape = context__.vals_r("alpha_shape")[(1 - 1)];
      current_statement__ = 23;
      stan::math::check_greater_or_equal(function__, "alpha_shape",
        alpha_shape, 0);
      current_statement__ = 24;
      context__.validate_dims("data initialization", "alpha_scale", "double",
        std::vector<size_t>{});
      alpha_scale = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 24;
      alpha_scale = context__.vals_r("alpha_scale")[(1 - 1)];
      current_statement__ = 24;
      stan::math::check_greater_or_equal(function__, "alpha_scale",
        alpha_scale, 0);
      current_statement__ = 25;
      context__.validate_dims("data initialization", "beta_shape", "double",
        std::vector<size_t>{});
      beta_shape = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 25;
      beta_shape = context__.vals_r("beta_shape")[(1 - 1)];
      current_statement__ = 25;
      stan::math::check_greater_or_equal(function__, "beta_shape",
        beta_shape, 0);
      current_statement__ = 26;
      context__.validate_dims("data initialization", "beta_scale", "double",
        std::vector<size_t>{});
      beta_scale = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 26;
      beta_scale = context__.vals_r("beta_scale")[(1 - 1)];
      current_statement__ = 26;
      stan::math::check_greater_or_equal(function__, "beta_scale",
        beta_scale, 0);
      current_statement__ = 27;
      context__.validate_dims("data initialization", "gamma_shape", "double",
        std::vector<size_t>{});
      gamma_shape = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 27;
      gamma_shape = context__.vals_r("gamma_shape")[(1 - 1)];
      current_statement__ = 27;
      stan::math::check_greater_or_equal(function__, "gamma_shape",
        gamma_shape, 0);
      current_statement__ = 28;
      context__.validate_dims("data initialization", "gamma_scale", "double",
        std::vector<size_t>{});
      gamma_scale = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 28;
      gamma_scale = context__.vals_r("gamma_scale")[(1 - 1)];
      current_statement__ = 28;
      stan::math::check_greater_or_equal(function__, "gamma_scale",
        gamma_scale, 0);
      current_statement__ = 29;
      stan::math::validate_non_negative_index("predicted_stop_times", "N", N);
      current_statement__ = 30;
      stan::math::validate_non_negative_index("log_lik", "N", N);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 1 + 1 + 1;
  }
  inline std::string model_name() const final {
    return "gamma_fit_model";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.32.2",
             "stancflags = "};
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "gamma_fit_model_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      local_scalar_t__ alpha = DUMMY_VAR__;
      current_statement__ = 1;
      alpha = in__.template read_constrain_lb<local_scalar_t__,
                jacobian__>(0, lp__);
      local_scalar_t__ beta = DUMMY_VAR__;
      current_statement__ = 2;
      beta = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
               lp__);
      local_scalar_t__ gamma = DUMMY_VAR__;
      current_statement__ = 3;
      gamma = in__.template read_constrain_lb<local_scalar_t__,
                jacobian__>(0, lp__);
      {
        current_statement__ = 10;
        lp_accum__.add(stan::math::gamma_lpdf<propto__>(alpha, alpha_shape,
                         alpha_scale));
        current_statement__ = 11;
        lp_accum__.add(stan::math::gamma_lpdf<propto__>(beta, beta_shape,
                         beta_scale));
        current_statement__ = 12;
        lp_accum__.add(stan::math::gamma_lpdf<propto__>(gamma, gamma_shape,
                         gamma_scale));
        current_statement__ = 15;
        for (int i = 1; i <= N; ++i) {
          current_statement__ = 13;
          lp_accum__.add(stan::math::gamma_lpdf<propto__>(
                           stan::model::rvalue(unplanned_stop_times,
                             "unplanned_stop_times",
                             stan::model::index_uni(i)), alpha, ((beta *
                           stan::model::rvalue(rejects, "rejects",
                             stan::model::index_uni(i))) + (gamma *
                           stan::model::rvalue(cycle_times, "cycle_times",
                             stan::model::index_uni(i))))));
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    static constexpr const char* function__ =
      "gamma_fit_model_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      double alpha = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 1;
      alpha = in__.template read_constrain_lb<local_scalar_t__,
                jacobian__>(0, lp__);
      double beta = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 2;
      beta = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
               lp__);
      double gamma = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 3;
      gamma = in__.template read_constrain_lb<local_scalar_t__,
                jacobian__>(0, lp__);
      out__.write(alpha);
      out__.write(beta);
      out__.write(gamma);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
      Eigen::Matrix<double,-1,1> predicted_stop_times =
        Eigen::Matrix<double,-1,1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> log_lik =
        Eigen::Matrix<double,-1,1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 9;
      for (int i = 1; i <= N; ++i) {
        current_statement__ = 6;
        stan::model::assign(predicted_stop_times,
          stan::math::gamma_rng(alpha, ((beta *
            stan::model::rvalue(rejects, "rejects", stan::model::index_uni(i)))
            + (gamma *
            stan::model::rvalue(cycle_times, "cycle_times",
              stan::model::index_uni(i)))), base_rng__),
          "assigning variable predicted_stop_times",
          stan::model::index_uni(i));
        current_statement__ = 7;
        stan::model::assign(log_lik,
          stan::math::gamma_lpdf<false>(
            stan::model::rvalue(unplanned_stop_times, "unplanned_stop_times",
              stan::model::index_uni(i)), alpha, ((beta *
            stan::model::rvalue(rejects, "rejects", stan::model::index_uni(i)))
            + (gamma *
            stan::model::rvalue(cycle_times, "cycle_times",
              stan::model::index_uni(i))))), "assigning variable log_lik",
          stan::model::index_uni(i));
      }
      out__.write(predicted_stop_times);
      out__.write(log_lik);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      local_scalar_t__ alpha = DUMMY_VAR__;
      current_statement__ = 1;
      alpha = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, alpha);
      local_scalar_t__ beta = DUMMY_VAR__;
      current_statement__ = 2;
      beta = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, beta);
      local_scalar_t__ gamma = DUMMY_VAR__;
      current_statement__ = 3;
      gamma = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, gamma);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "alpha", "double",
        std::vector<size_t>{});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "beta", "double",
        std::vector<size_t>{});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "gamma", "double",
        std::vector<size_t>{});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      local_scalar_t__ alpha = DUMMY_VAR__;
      current_statement__ = 1;
      alpha = context__.vals_r("alpha")[(1 - 1)];
      out__.write_free_lb(0, alpha);
      local_scalar_t__ beta = DUMMY_VAR__;
      current_statement__ = 2;
      beta = context__.vals_r("beta")[(1 - 1)];
      out__.write_free_lb(0, beta);
      local_scalar_t__ gamma = DUMMY_VAR__;
      current_statement__ = 3;
      gamma = context__.vals_r("gamma")[(1 - 1)];
      out__.write_free_lb(0, gamma);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"alpha", "beta", "gamma"};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {
      std::vector<std::string> temp{"predicted_stop_times", "log_lik"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
                std::vector<size_t>{}, std::vector<size_t>{}};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(N)},
             std::vector<size_t>{static_cast<size_t>(N)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    param_names__.emplace_back(std::string() + "alpha");
    param_names__.emplace_back(std::string() + "beta");
    param_names__.emplace_back(std::string() + "gamma");
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "predicted_stop_times" +
          '.' + std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "log_lik" + '.' +
          std::to_string(sym1__));
      }
    }
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    param_names__.emplace_back(std::string() + "alpha");
    param_names__.emplace_back(std::string() + "beta");
    param_names__.emplace_back(std::string() + "gamma");
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "predicted_stop_times" +
          '.' + std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "log_lik" + '.' +
          std::to_string(sym1__));
      }
    }
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"alpha\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"beta\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"gamma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"predicted_stop_times\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"alpha\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"beta\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"gamma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"predicted_stop_times\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((1 + 1) + 1);
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities * ((N + N));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((1 + 1) + 1);
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities * ((N + N));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = gamma_fit_model_namespace::gamma_fit_model;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return gamma_fit_model_namespace::profiles__;
}
#endif